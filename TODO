TODO
====

BEFORE UPLOADING THE TREE
-------------------------

Make SGNASCAR boot.

Move the slave GPU access to hikaru-gpu.c.

Rewrite the JSON file to be more flexible (just like MAME.)

Move the JSON location to '$HOME/.local/share/valkyrie' or something.

Fix the copyright in the [ch] files (year, and license text.)

HIKARU
-------

Implement better AICA support (especially the RTC.)

Implement better MIE support (that is, wrap a Z80 emulator in a
vk_cpu : z80 class and tape it in the code.)

Implement the three EEPROMs (MAINBD, ROMBD, MIE.)

SH4
---

Gix FTRV, FIPR PR handling; see AIRTRIX/PHARRIER.

Implement the TMU.

RENDERING
---------

Fix triangle rendering: put everything in a vertex buffer object and compute
the properties of each triangle before rendering it. It's required to
display the CRT test screen properly.

Fix texturing; decode the coordinates properly. This likely implies finding
out what the texture commands (2C1, etc.) mean. Considering that the
tri-strip main menu should look like the braveff menu (which is rendered
directly using the bitmap layers), the Y coordinates are way off.

Fix GPU IDMA; it likely performs texture decoding. Use the BOOTROM and
AIRTRIX as test cases. Note that the parameters to the IDMA are the same
as the texture commands (2C1, etc.)

Fix the bitmap layers. The area cleared in TEXRAM by AIRTRIX doesn't match
the area where the textures are uploaded (see the SEGA intro screen.) Find
out why.

AIRTRIX
-------

Find out why it goes haywire.

BRAVEFF
-------

Missing MASKROMs. Won't work. It works enough to display the test menu
though.

Cyber Troops Virtual On 4
-------------------------

Not dumped yet.

PHARRIER
--------

Find out why it goes haywire.

PODRACE
-------

Missing MASKROMS. Won't work. Useful to test MASKROM shrinkage tho (the
second problem SGNASCAR has.)

SGNASCAR
--------

For some reason the ROM->RAM transfer table at EPROM offset +390 tells
the BOOTROM to read 01FF0000 bytes from the ROM aperture at 03xxxxxx.
The problem is that the aperture is only 16MB wide, so the BOOTROM ends
up reading garbage from the 04xxxxxx MEMCTL device.

Adding a patch to make the memcpy loop respect the bounds make SGNASCAR
jump to the newly-copied code, but later writes stuff to the BOOTROM
read-only area.
